- name: Add Dockerâ€™s official GPG key
  apt_key:
    url: https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg
    state: present
  register: GPG
  tags: docker_install

- name: set up docker {{ docker_release }} repository
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release | lower }} stable
    state: present
    filename: docker
  register: release
  tags: docker_install

- name: update cache
  apt:
    update_cache: yes
  tags: docker_install

- name: creating docker group
  group:
    name: "{{ item }}"
    state: present
  with_items:
  - admin
  - docker
  tags: docker_install
  
- name: Add vagrant user to docker group
  user:
    name: vagrant
    groups: "{{ item }}"
  with_items:
  - admin
  - docker
  tags: docker_install

- name: install docker
  apt: 
    name: docker-ce=5:20.10.7~3-0~ubuntu-bionic
    state: present
  tags: docker_install
  ignore_errors: yes

#- name: add to docker.service flannel env file
#  lineinfile:
#    path: /lib/systemd/system/docker.service
#    insertafter: "Type=notify"
#    firstmatch: yes
#    line: "EnvironmentFile=/run/flannel/subnet.env"
#
#- name: add docker to flannel network
#  replace:
#    path: /lib/systemd/system/docker.service
#    regexp: '^ExecStart=.*'
#    replace: 'ExecStart=/usr/bin/dockerd -H unix:// --containerd=/run/containerd/containerd.sock --bip=${FLANNEL_SUBNET} --mtu=${FLANNEL_MTU}'
#  tags:
#    - docker
#    - docker_bip
 
- name: change fd to unix
  replace:
    path: /lib/systemd/system/docker.service
    regexp: '^ExecStart=.*'
    replace: 'ExecStart=/usr/bin/dockerd -H unix:// --containerd=/run/containerd/containerd.sock'
  tags:
    - docker
    - docker_bip

- name: change docker runtime
  shell: |
    cat > /etc/docker/daemon.json <<EOF
    {
      "exec-opts": ["native.cgroupdriver=systemd"],
      "log-driver": "json-file",
      "log-opts": {
        "max-size": "100m"
      },
      "storage-driver": "overlay2"
    }
    EOF
    mkdir -p /etc/systemd/system/docker.service.d
    systemctl daemon-reload
    systemctl restart docker
  args:
    executable: /bin/bash
